<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EverettSy Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.syraven.top/"/>
  <updated>2019-05-03T14:03:08.062Z</updated>
  <id>http://www.syraven.top/</id>
  
  <author>
    <name>Raven</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于泛型</title>
    <link href="http://www.syraven.top/%E6%B3%9B%E5%9E%8B%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://www.syraven.top/泛型学习.html</id>
    <published>2019-05-03T13:35:46.259Z</published>
    <updated>2019-05-03T14:03:08.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于泛型"><a href="#关于泛型" class="headerlink" title="关于泛型"></a><center><strong>关于泛型</strong></center></h1><h2 id="1-为什么需要泛型"><a href="#1-为什么需要泛型" class="headerlink" title="1.为什么需要泛型"></a>1.为什么需要泛型</h2><h3 id="1-1-使用集合时可能会发生安全的问题：可以向集合中放入任何类型"><a href="#1-1-使用集合时可能会发生安全的问题：可以向集合中放入任何类型" class="headerlink" title="1.1 使用集合时可能会发生安全的问题：可以向集合中放入任何类型"></a>1.1 使用集合时可能会发生安全的问题：可以向集合中放入任何类型</h3><h3 id="1-2-麻烦：从集合中获取元素-需要进行类型的强制转换"><a href="#1-2-麻烦：从集合中获取元素-需要进行类型的强制转换" class="headerlink" title="1.2 麻烦：从集合中获取元素,需要进行类型的强制转换"></a>1.2 麻烦：从集合中获取元素,需要进行类型的强制转换</h3><h2 id="2-使用泛型：使用泛型方法、泛型类"><a href="#2-使用泛型：使用泛型方法、泛型类" class="headerlink" title="2.使用泛型：使用泛型方法、泛型类"></a>2.使用泛型：使用泛型方法、泛型类</h2><a id="more"></a><h2 id="3-定义泛型"><a href="#3-定义泛型" class="headerlink" title="3.定义泛型"></a>3.定义泛型</h2><h3 id="3-1：定义泛型类：-按照规则来定义"><a href="#3-1：定义泛型类：-按照规则来定义" class="headerlink" title="3.1：定义泛型类： 按照规则来定义"></a>3.1：定义泛型类： 按照规则来定义</h3><h4 id="3-1-1-声明类-接口-时-在类名的后面-大括号的前面利用-lt-gt-来声明泛型。在类中凡是可以使用类型的地方都可以使用类中声明的泛型"><a href="#3-1-1-声明类-接口-时-在类名的后面-大括号的前面利用-lt-gt-来声明泛型。在类中凡是可以使用类型的地方都可以使用类中声明的泛型" class="headerlink" title="3.1.1 声明类(接口)时,在类名的后面,大括号的前面利用&lt;&gt; 来声明泛型。在类中凡是可以使用类型的地方都可以使用类中声明的泛型."></a>3.1.1 声明类(接口)时,在类名的后面,大括号的前面利用&lt;&gt; 来声明泛型。在类中凡是可以使用类型的地方都可以使用类中声明的泛型.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dao</span>&lt;<span class="title">T</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2：定义泛型方法"><a href="#3-2：定义泛型方法" class="headerlink" title="3.2：定义泛型方法"></a>3.2：定义泛型方法</h3><h4 id="3-2-1-在类-不一定是泛型类-中使用泛型方法"><a href="#3-2-1-在类-不一定是泛型类-中使用泛型方法" class="headerlink" title="3.2.1 在类(不一定是泛型类)中使用泛型方法."></a>3.2.1 在类(不一定是泛型类)中使用泛型方法.</h4><h4 id="3-2-2-在方法的返回值前面使用-lt-gt-声明泛型类型，则在方法的返回值-参数-方法体中都可以使用该类型"><a href="#3-2-2-在方法的返回值前面使用-lt-gt-声明泛型类型，则在方法的返回值-参数-方法体中都可以使用该类型" class="headerlink" title="3.2.2 在方法的返回值前面使用 &lt;&gt; 声明泛型类型，则在方法的返回值,参数,方法体中都可以使用该类型"></a>3.2.2 在方法的返回值前面使用 &lt;&gt; 声明泛型类型，则在方法的返回值,参数,方法体中都可以使用该类型</h4><h2 id="4-通配符"><a href="#4-通配符" class="headerlink" title="4.通配符"></a>4.通配符</h2><h3 id="4-1-如果Foo是Bar的一个子类型-子类或接口-而G是某种泛型声明"><a href="#4-1-如果Foo是Bar的一个子类型-子类或接口-而G是某种泛型声明" class="headerlink" title="4.1 如果Foo是Bar的一个子类型(子类或接口),而G是某种泛型声明."></a>4.1 如果Foo是Bar的一个子类型(子类或接口),而G是某种泛型声明.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">那么G&lt;Foo&gt;是G&lt;Bar&gt;的子类型并不成立:Person 是Object的子类,但List&lt;Person&gt;却不是List&lt;Object&gt;的子类！</span><br><span class="line">printPersons(List&lt;Person&gt; persons); 该方法的参数只能是Person类型的List,而不能</span><br><span class="line">是Person 任何子类的List,例如Student类型的List</span><br><span class="line">Collection&lt;?&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-Collection-lt-gt"><a href="#4-2-Collection-lt-gt" class="headerlink" title="4.2 Collection&lt;?&gt;"></a>4.2 Collection&lt;?&gt;</h3><h4 id="4-2-1-它的元素类型可以匹配任何类型-被称为通配符"><a href="#4-2-1-它的元素类型可以匹配任何类型-被称为通配符" class="headerlink" title="4.2.1 它的元素类型可以匹配任何类型. ? 被称为通配符."></a>4.2.1 它的元素类型可以匹配任何类型. ? 被称为通配符.</h4><h4 id="4-2-2-将任意元素加入其中不是类型安全的-null除外！-因为null-可以是任何类型"><a href="#4-2-2-将任意元素加入其中不是类型安全的-null除外！-因为null-可以是任何类型" class="headerlink" title="4.2.2 将任意元素加入其中不是类型安全的,null除外！ 因为null 可以是任何类型"></a>4.2.2 将任意元素加入其中不是类型安全的,null除外！ 因为null 可以是任何类型</h4><h3 id="4-3-Collection-lt-extends-Person-gt-为带上限的通配符：该类型可以指向Person类型及Person子类类型的集合。但，也不能向其中放null以外的任何元素"><a href="#4-3-Collection-lt-extends-Person-gt-为带上限的通配符：该类型可以指向Person类型及Person子类类型的集合。但，也不能向其中放null以外的任何元素" class="headerlink" title="4.3 Collection&lt;? extends Person&gt;为带上限的通配符：该类型可以指向Person类型及Person子类类型的集合。但，也不能向其中放null以外的任何元素."></a>4.3 Collection&lt;? extends Person&gt;为带上限的通配符：该类型可以指向Person类型及Person子类类型的集合。但，也不能向其中放null以外的任何元素.</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于泛型&quot;&gt;&lt;a href=&quot;#关于泛型&quot; class=&quot;headerlink&quot; title=&quot;关于泛型&quot;&gt;&lt;/a&gt;&lt;center&gt;&lt;strong&gt;关于泛型&lt;/strong&gt;&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;1-为什么需要泛型&quot;&gt;&lt;a href=&quot;#1-为什么需要泛型&quot; class=&quot;headerlink&quot; title=&quot;1.为什么需要泛型&quot;&gt;&lt;/a&gt;1.为什么需要泛型&lt;/h2&gt;&lt;h3 id=&quot;1-1-使用集合时可能会发生安全的问题：可以向集合中放入任何类型&quot;&gt;&lt;a href=&quot;#1-1-使用集合时可能会发生安全的问题：可以向集合中放入任何类型&quot; class=&quot;headerlink&quot; title=&quot;1.1 使用集合时可能会发生安全的问题：可以向集合中放入任何类型&quot;&gt;&lt;/a&gt;1.1 使用集合时可能会发生安全的问题：可以向集合中放入任何类型&lt;/h3&gt;&lt;h3 id=&quot;1-2-麻烦：从集合中获取元素-需要进行类型的强制转换&quot;&gt;&lt;a href=&quot;#1-2-麻烦：从集合中获取元素-需要进行类型的强制转换&quot; class=&quot;headerlink&quot; title=&quot;1.2 麻烦：从集合中获取元素,需要进行类型的强制转换&quot;&gt;&lt;/a&gt;1.2 麻烦：从集合中获取元素,需要进行类型的强制转换&lt;/h3&gt;&lt;h2 id=&quot;2-使用泛型：使用泛型方法、泛型类&quot;&gt;&lt;a href=&quot;#2-使用泛型：使用泛型方法、泛型类&quot; class=&quot;headerlink&quot; title=&quot;2.使用泛型：使用泛型方法、泛型类&quot;&gt;&lt;/a&gt;2.使用泛型：使用泛型方法、泛型类&lt;/h2&gt;
    
    </summary>
    
      <category term="Java基础学习" scheme="http://www.syraven.top/categories/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="泛型" scheme="http://www.syraven.top/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo入门事件---搭建一个最简单的Demo框架</title>
    <link href="http://www.syraven.top/Dubbo.html"/>
    <id>http://www.syraven.top/Dubbo.html</id>
    <published>2018-08-29T04:03:00.000Z</published>
    <updated>2018-12-01T12:21:32.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dubbo背景和简介"><a href="#Dubbo背景和简介" class="headerlink" title="Dubbo背景和简介"></a>Dubbo背景和简介</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><hr><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。</p><p><img src="https://dubbo.incubator.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture-roadmap.jpg" alt=""><br><a id="more"></a></p><h4 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h4><p>当网站流量很小时，只需要一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架（ORM)是关键</p><h4 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h4><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小,将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架（MVC）是关键。</p><h4 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h4><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立服务，逐渐形成稳定的服务中心，使前端应用能快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架（RPC）是关键。</p><h4 id="流动计算构架"><a href="#流动计算构架" class="headerlink" title="流动计算构架"></a>流动计算构架</h4><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心（SOA）是关键。</p><hr><p>关于RPC的简介：<br><strong>RPC(Remote Procedure Call Protocol)：远程过程调用</strong>：<br>两台服务器A、B，分别部署不同的应用a，b。当A服务器想要调用B服务器上应用b提供的函数和方法的时候，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义传达调用的数据。</p><p>直白的说就是，你在你的机器上写了一个程序，我这边是无法直接调用的 ，这个时候就出现了一个远程调用的概念。</p><blockquote><p>RPC是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。<br>RPC采用客户机/服务器模式。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。</p></blockquote><p><strong>RPC需要解决的问题：</strong></p><ul><li><strong>通讯问题</strong>：主要是通过在客户端和服务端之间建立TCP连接，远程过程调用的所有交换的数据都在这个连接里传输。连接可以是按需连接，调用结束后就断掉，也可以是长连接，多个远程过程调用共享同一个连接。</li><li><strong>寻址问题</strong>：A服务器上的应用怎么告诉底层的RPC框架，如何连接到B服务器（如主机或IP地址）以及特定的端口，方法的名称名称是什么，这样才能完成调用。比如基于Web服务协议栈的RPC，就要提供一个endpoint URI，或者是从UDDI服务上查找。如果是RMI调用的话，还需要一个RMI Registry来注册服务的地址。</li><li><strong>序列化和反序列化</strong>：当A服务器上的应用发起远程调用时，方法的参数需要通过底层的网络协议如TCP 传递到B服务器，由于网络协议是基于二进制，内存中的参数的值要序列化成二进制的形式，也就是序列化（Serialize）或编组（marshal），通过寻址好传输将序列化的二进制发送给B服务器。<br>同理，B服务器接收参数要将参数反序列化。B服务器应用调用自己的方法处理后返回的结果也要序列化给A服务器，A服务器接收也要经过反序列化的过程。</li></ul><hr><h2 id="Dubbo是什么"><a href="#Dubbo是什么" class="headerlink" title="Dubbo是什么"></a>Dubbo是什么</h2><p>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：</p><ul><li>面向接口的远程方法调用</li><li>智能容错和负载均衡</li><li>服务自动注册和发现。</li></ul><p>每天为2千多个服务提供大于30亿次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点以及别的公司的业务中。</p><hr><h2 id="Dubbo架构"><a href="#Dubbo架构" class="headerlink" title="Dubbo架构"></a>Dubbo架构</h2><p><img src="https://dubbo.incubator.apache.org/img/architecture.png" alt=""></p><p><strong>节点角色说明</strong></p><table><thead><tr><th style="text-align:center">节点</th><th style="text-align:center">角色说明</th></tr></thead><tbody><tr><td style="text-align:center">Provider</td><td style="text-align:center">暴露服务的服务提供方</td></tr><tr><td style="text-align:center">Consumer</td><td style="text-align:center">调用远程服务的服务消费方</td></tr><tr><td style="text-align:center">Registry</td><td style="text-align:center">服务注册与发现的注册中心</td></tr><tr><td style="text-align:center">Monitor</td><td style="text-align:center">统计服务的调用次数和调用时间的监控中心</td></tr><tr><td style="text-align:center">Container</td><td style="text-align:center">服务运行容器</td></tr></tbody></table><p><strong>调用关系说明</strong></p><ol start="0"><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><p>Dubbo 架构具有以下几个特点，分别是连通性、健壮性、伸缩性、以及向未来架构的升级性。</p><h3 id="连通性"><a href="#连通性" class="headerlink" title="连通性"></a>连通性</h3><hr><ul><li>注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小</li><li>监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示</li><li>服务提供者向注册中心注册其提供的服务，并汇报调用时间到监控中心，此时间不包含网络开销</li><li>服务消费者向注册中心获取服务提供者地址列表，并根据负载算法直接调用提供者，同时汇报调用时间到监控中心，此时间包含网络开销</li><li>注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外</li><li>注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者</li><li>注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表</li><li>注册中心和监控中心都是可选的，服务消费者可以直连服务提供者</li></ul><h3 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h3><hr><ul><li>监控中心宕掉不影响使用，只是丢失部分采样数据</li><li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务</li><li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台</li><li>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯</li><li>服务提供者无状态，任意一台宕掉后，不影响使用</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复</li></ul><h3 id="伸缩性"><a href="#伸缩性" class="headerlink" title="伸缩性"></a>伸缩性</h3><hr><ul><li>注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心</li><li>服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者</li></ul><hr><h4 id="Dubbo注册中心"><a href="#Dubbo注册中心" class="headerlink" title="Dubbo注册中心"></a>Dubbo注册中心</h4><p>对于服务提供方，它需要发布服务，而且由于应用系统的复杂性，服务的数量、类型也不断膨胀；<br>对于服务消费方，它最关心如何获取到它所需要的服务，而面对复杂的应用系统，需要管理大量的服务调用。<br>而且，对于服务提供方和服务消费方来说，他们还有可能兼具这两种角色，即既需要提供服务，有需要消费服务。</p><p>通过将服务统一管理起来，可以有效地优化内部应用对服务发布/使用的流程和管理。服务注册中心可以通过特定协议来完成服务对外的统一。</p><p><strong>Dubbo提供的注册中心有如下几种类型可供选择</strong>： </p><ul><li>Multicast注册中心</li><li>Zookeeper注册中心</li><li>Redis注册中心</li><li>Simple注册中心</li></ul><hr><p><strong>Dubbo优缺点</strong></p><p><strong>优点：</strong></p><ol><li><p>透明化的远程方法调用 （ 像调用本地方法一样调用远程方法；只需简单配置，没有任何API侵入。）</p></li><li><p>软负载均衡及容错机制  </p><p>   ①.可在内网替代nginx lvs等硬件负载均衡器。</p></li><li><p>服务注册中心自动注册 &amp; 配置管理<br>  ①.不需要写死服务提供者地址，注册中心基于接口名自动查询提供者ip。<br>  ②.使用类似zookeeper等分布式协调服务作为服务注册中心,可以将绝大部分项目配置移入zookeeper集群。</p></li><li><p>服务接口监控与治理<br>  ①.Dubbo-admin与Dubbo-monitor提供了完善的服务接口管理与监控功能，针对不同应用的不同接口，可以进行 多版本，多协议，多注册中心管理。 </p></li></ol><p><strong>缺点：</strong> </p><ul><li>只支持JAVA语言</li></ul><h4 id="Dubbo入门Demo"><a href="#Dubbo入门Demo" class="headerlink" title="Dubbo入门Demo"></a><strong>Dubbo入门Demo</strong></h4><p>了解了Dubbo以后，自然要搭建一个简单的Demo实现。本文采用Dubbo与Zookeeper、Spring框架的整合 </p><p>主要是以下几个步骤： </p><ol><li>安装Zookeeper后，启动</li><li>创建Maven项目，构建Dubbo+Zookeeper+Spring实现的简单Demo；</li><li>安装Dubbo-admin，实现监控。</li></ol><h5 id="Zookeeper介绍与安装"><a href="#Zookeeper介绍与安装" class="headerlink" title="Zookeeper介绍与安装"></a>Zookeeper介绍与安装</h5><p>本Demo中的Dubbo注册中心采用的是Zookeeper。为什么采用Zookeeper呢？ </p><blockquote><p>Zookeeper是一个分布式的服务框架，是树型的目录服务的数据存储，能做到集群管理数据 ，这里能很好的作为Dubbo服务的注册中心。</p><p>Dubbo能与Zookeeper做到集群部署，当提供者出现断电等异常停机时，Zookeeper注册中心能自动删除提供者信息，当提供者重启时，能自动恢复注册数据，以及订阅请求</p></blockquote><p>具体的安装方法在此不一一叙述，可参考博文：<br><a href="http://blog.csdn.net/tlk20071/article/details/52028945" target="_blank" rel="noopener">http://blog.csdn.net/tlk20071/article/details/52028945</a></p><p>安装完成后，进入到bin目录，并且启动zkServer.cmd，这个脚本中会启动一个java进程：<br>(注：需要先启动zookeeper后，后续dubbo demo代码运行才能使用zookeeper注册中心的功能) </p><p><img src="http://pa5d8eb62.bkt.clouddn.com/Zookeeper.png" alt=""></p><h5 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h5><p>项目结构：<br>主要分为三大模块：<br>dubbo-api：存放公共接口；<br>dubbo-consumer :　调用远程服务；<br>dubbo-provider： : 提供远程服务。 </p><p><img src="http://pa5d8eb62.bkt.clouddn.com/DubboDemo.png" alt=""></p><p>下面将详细叙述代码构建过程。<br>1）首先构建Maven项目，导入所需要的jar包依赖。</p><p>列出详细的pom.xml文件</p><p><img src="http://pa5d8eb62.bkt.clouddn.com/pomxml.png" alt=""></p><p><img src="http://pa5d8eb62.bkt.clouddn.com/pomxml_1.png" alt=""></p><p><img src="http://pa5d8eb62.bkt.clouddn.com/pomxml_4.png" alt=""></p><p><img src="http://pa5d8eb62.bkt.clouddn.com/pomxml_5.png" alt=""></p><p><img src="http://pa5d8eb62.bkt.clouddn.com/pomxml_6.png" alt=""></p><p><img src="http://pa5d8eb62.bkt.clouddn.com/pomxml_7.png" alt=""></p><p><img src="http://pa5d8eb62.bkt.clouddn.com/pomxml_8.png" alt=""></p><p>2）创建dubbo-api的Maven项目(有独立的pom.xml，用来打包供应服务提供者、服务消费者使用)。<br>在项目中定义服务接口：该接口需单独打包，在服务提供方和消费方共享。 </p><p><img src="http://pa5d8eb62.bkt.clouddn.com/DemoService.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.raven.dubbo.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Raven on 2018年7月12日15:21:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getPermissions</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3))创建dubbo-provider的Maven项目(有独立的pom.xml，用来打包供消费者使用)。<br>实现公共接口，此实现对消费者隐藏：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.raven.dubbo.demo.impl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Boy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> com.raven.dubbo.demo.DemoService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getPermissions</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; demo = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        demo.add(String.format(<span class="string">"Permission_%d"</span>, id-<span class="number">1</span>));</span><br><span class="line">        demo.add(String.format(<span class="string">"Permission_%d"</span>,id));</span><br><span class="line">        demo.add(String.format(<span class="string">"Permission_%d"</span>,id+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> demo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在dubbo-provider中的pom.xml文件中加入公共接口所在的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>DubboDemo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用Spring配置声明暴露服务 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义了提供方应用信息，用于计算依赖关系；在 dubbo-admin 或 dubbo-monitor 会显示这个名字，方便辨识--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demotest-provider"</span> <span class="attr">owner</span>=<span class="string">"programmer"</span> <span class="attr">organization</span>=<span class="string">"dubbox"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 zookeeper 注册中心暴露服务，注意要先开启 zookeeper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://localhost:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 dubbo 协议实现定义好的 api.PermissionService 接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.raven.dubbo.demo.DemoService"</span> <span class="attr">ref</span>=<span class="string">"demoService"</span> <span class="attr">protocol</span>=<span class="string">"dubbo"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 dubbo 协议实现定义好的 api.PermissionService 接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">class</span>=<span class="string">"com.raven.dubbo.demo.impl.DemoServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动远程服务： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.raven.dubbo.demo.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述:&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * &lt;服务提供者&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>: 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:Raven</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/7/17 0017 16:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//读取Provider配置文件</span></span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"provider.xml"</span>);</span><br><span class="line">        System.out.println(context.getDisplayName()+<span class="string">":here"</span>);</span><br><span class="line">        <span class="comment">//启动容器</span></span><br><span class="line">        context.start();</span><br><span class="line">        System.out.println(<span class="string">"provider服务已经启动..."</span>);</span><br><span class="line">        <span class="comment">//使线程阻塞</span></span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4)创建dubbo-consumer的Maven项目(可以有多个consumer，但是需要配置好)。  调用所需要的远程服务： </p><p>通过Spring配置引用远程服务： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"demotest-consumer"</span> <span class="attr">owner</span>=<span class="string">"programmer"</span> <span class="attr">organization</span>=<span class="string">"dubbox"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 向zookeeper 订阅provider 的地址，由zookeeper定时推送--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://localhost:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用dubbo 协议调用定义好的api.PermissionService--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"permissionService"</span> <span class="attr">interface</span>=<span class="string">"com.raven.dubbo.demo.DemoService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动Consumer,调用远程服务： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.raven.dubbo.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.raven.dubbo.demo.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述: &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 〈消费者示例〉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>: 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:Administrator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/7/17 0017 16:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"consumer.xml"</span>);</span><br><span class="line">        context.start();</span><br><span class="line">        System.out.println(<span class="string">"consumer start"</span>);</span><br><span class="line">        <span class="comment">//获取在zookeeper注册的服务接口</span></span><br><span class="line">        DemoService demoService = context.getBean(DemoService.class);</span><br><span class="line">        System.out.println(<span class="string">"consumer"</span>);</span><br><span class="line">        System.out.println(demoService.getPermissions(<span class="number">1L</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5）运行项目，先确保provider已被运行后再启动consumer模块：  </p><p>运行提供者：  </p><p><img src="http://pa5d8eb62.bkt.clouddn.com/provider.jpg" alt=""></p><p>消费者成功调用提供者所提供的远程服务： </p><p><img src="http://pa5d8eb62.bkt.clouddn.com/consumer.jpg" alt=""></p><hr><h5 id="Dubbo管理控制台介绍"><a href="#Dubbo管理控制台介绍" class="headerlink" title="Dubbo管理控制台介绍"></a>Dubbo管理控制台介绍</h5><h6 id="下载dubbo-admin"><a href="#下载dubbo-admin" class="headerlink" title="下载dubbo-admin"></a>下载dubbo-admin</h6><p>可自行根据网上介绍安装,安装使用方法<br>dubbo-admin是阿里巴巴的发布的dubbo管理平台。官方下载地址：<a href="https://github.com/alibaba/dubbo" target="_blank" rel="noopener">https://github.com/alibaba/dubbo</a><br>我用的2.6.0<a href="https://github.com/apache/incubator-dubbo/releases/tag/dubbo-2.6.0" target="_blank" rel="noopener">下载incubator-dubbo-dubbo-2.6.0版本</a>.</p><p>将下载好的压缩包解压，进入dubbo-admin-2.6.0/WEB-INF中打开dubbo.properties文件，修改对应wookeeper服务对应地址、端口。 </p><p><img src="http://pa5d8eb62.bkt.clouddn.com/dubbo-admin-2.6.0.png" alt=""></p><h6 id="修改dubbo-properties文件"><a href="#修改dubbo-properties文件" class="headerlink" title="修改dubbo.properties文件"></a>修改dubbo.properties文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">dubbo.admin.root.password=root</span><br><span class="line">dubbo.admin.guest.password=guest</span><br></pre></td></tr></table></figure><p>将ROOT文件放入tomcat/webapps下，替换tomcata自带的ROOT，</p><p><img src="http://pa5d8eb62.bkt.clouddn.com/tomcat.png" alt=""></p><h6 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h6><p>打开网址 :<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> ,账户名、密码都是root ,点击服务治理-&gt;提供者，这里就可以看到dubbo发布的provider详细信息。 </p><p><img src="http://pa5d8eb62.bkt.clouddn.com/admin_provider.png" alt=""></p><p>成功开启输入用户名密码root后，即可进入控制台首页查看消费者提供者情况：  </p><h6 id="查看提供者："><a href="#查看提供者：" class="headerlink" title="查看提供者："></a>查看提供者：</h6><p><img src="http://pa5d8eb62.bkt.clouddn.com/Provider_.png" alt=""></p><h6 id="查看消费者："><a href="#查看消费者：" class="headerlink" title="查看消费者："></a>查看消费者：</h6><p><img src="http://pa5d8eb62.bkt.clouddn.com/Consumer_.png" alt=""></p><p>阿里项目地址，有兴趣可以查看：<br><a href="https://github.com/apache/incubator-dubbo" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo</a></p><hr><p>参考文章：<br><a href="https://blog.csdn.net/noaman_wgs/article/details/70214612/#commentBox" target="_blank" rel="noopener">Dubbo入门—搭建一个最简单的Demo框架</a></p><p><a href="https://blog.csdn.net/luo4105/article/details/70829489#commentBox" target="_blank" rel="noopener">dubbo系列（三）——dubbo管理工具dubbo-admin安装使用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dubbo背景和简介&quot;&gt;&lt;a href=&quot;#Dubbo背景和简介&quot; class=&quot;headerlink&quot; title=&quot;Dubbo背景和简介&quot;&gt;&lt;/a&gt;Dubbo背景和简介&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dubbo.incubator.apache.org/docs/zh-cn/user/sources/images/dubbo-architecture-roadmap.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="分布式框架" scheme="http://www.syraven.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Dubbo" scheme="http://www.syraven.top/tags/Dubbo/"/>
    
      <category term="分布式框架" scheme="http://www.syraven.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot文件上传集成Swagger生成RESTful规范API文档</title>
    <link href="http://www.syraven.top/SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9B%86%E6%88%90Swagger%E7%94%9F%E6%88%90RESTful%E8%A7%84%E8%8C%83API%E6%96%87%E6%A1%A3.html"/>
    <id>http://www.syraven.top/SpringBoot文件上传集成Swagger生成RESTful规范API文档.html</id>
    <published>2018-08-08T00:12:00.000Z</published>
    <updated>2018-12-01T12:21:32.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集成Swagger生成RESTful规范API文档"><a href="#集成Swagger生成RESTful规范API文档" class="headerlink" title="集成Swagger生成RESTful规范API文档"></a>集成Swagger生成RESTful规范API文档</h1><p>Swagger是为了描述一套标准的而且是和语言无关的REST API的规范。对于外部调用者来说，只需通过Swagger文档即可清楚Server端提供的服务，而不需去阅读源码或接口文档说明。</p><h5 id="官方网站：http-swagger-io"><a href="#官方网站：http-swagger-io" class="headerlink" title="官方网站：http://swagger.io"></a>官方网站：<a href="http://swagger.io" target="_blank" rel="noopener">http://swagger.io</a></h5><h5 id="中文网站：http-www-sosoapi-com"><a href="#中文网站：http-www-sosoapi-com" class="headerlink" title="中文网站：http://www.sosoapi.com"></a>中文网站：<a href="http://www.sosoapi.com" target="_blank" rel="noopener">http://www.sosoapi.com</a></h5><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><strong>前后端分离</strong></p><ol><li>前后端仅仅通过异步接口(AJAX/JSON)来编程</li><li>前后端都各自有自己的开发流程流程，构建工具，测试集合。</li><li>关注点分离,前后端变得相对独立并且松耦合</li></ol><p><img src="http://pa5d8eb62.bkt.clouddn.com/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB.png" alt=""></p><ol><li>后台编写和维护接口文档，在 API 变化时更新接口文档</li><li>后台根据接口文档进行接口开发</li><li>前端根据接口文档进行开发</li><li>开发完成后联调和提交测试<br><img src="http://pa5d8eb62.bkt.clouddn.com/liantiao.png" alt=""></li></ol><h5 id="Spring-Boot整合Swagger2"><a href="#Spring-Boot整合Swagger2" class="headerlink" title="Spring Boot整合Swagger2"></a>Spring Boot整合Swagger2</h5><h6 id="1、修改pom-xml-添加Swagger2依赖"><a href="#1、修改pom-xml-添加Swagger2依赖" class="headerlink" title="1、修改pom.xml,添加Swagger2依赖"></a><strong>1、修改pom.xml,添加Swagger2依赖</strong></h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Swagger2--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--接口API生成html文档--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h6 id="2、编写Swagger2配置类"><a href="#2、编写Swagger2配置类" class="headerlink" title="2、编写Swagger2配置类"></a><strong>2、编写Swagger2配置类</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈通过<span class="doctag">@Configuration</span>注解 让Spring来加载该类配置〉</span></span><br><span class="line"><span class="comment"> * 〈通过<span class="doctag">@EnableSwagger</span>2注解启用Swagger2〉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Raven</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018/8/6 1125</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//为当前包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.raven.upload.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                <span class="comment">//页面标题</span></span><br><span class="line">                .title(<span class="string">"springBoot文件上传平台--基数数据API说明文档"</span>)</span><br><span class="line">                <span class="comment">//创建人</span></span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"Raven"</span>,<span class="string">"http://www.syraven.top"</span>,<span class="string">"sy759770423@163.com"</span>))</span><br><span class="line">                <span class="comment">//描述</span></span><br><span class="line">                .description(<span class="string">"2018.8.6上线版本"</span>)</span><br><span class="line">                <span class="comment">//.termsOfServiceUrl("http://syraven.top")</span></span><br><span class="line">                <span class="comment">//版本号</span></span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过@Configuration注解，让Spring来加载该类配置</li><li>通过@EnableSwagger2注解来启用Swagger2。</li></ol><p><strong>再通过createRestApi函数创建Docket的Bean之后，apiInfo()用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。select()函数返回一个ApiSelectorBuilder实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被@ApiIgnore注解的API）。</strong></p><h6 id="3、编写Controller"><a href="#3、编写Controller" class="headerlink" title="3、编写Controller"></a><strong>3、编写Controller</strong></h6><p>这里开始编写自己的RESTful Controller，跟正常开发没什么区别。主要是接口方法上面新增了几个注解：</p><ul><li>通过@ApiOperation注解来给API增加说明</li><li>通过@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明</li><li>通过@ApiIgnore来忽略那些不想让生成RESTful API文档的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.raven.upload.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParams;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 〈〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Raven</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018/7/24 0024</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/file"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@Api</span>(value = <span class="string">"文件上传UploadController"</span>,tags = &#123;<span class="string">"文件上传"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化上传文件界面,跳转到index.jsp</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"初始化上传界面"</span>,notes = <span class="string">"上传界面"</span>)</span><br><span class="line">    <span class="comment">//@GetMapping(value = "/index")</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/index"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 前台上传的文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/upload"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="comment">//@PostMapping(value = "/upload")</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"上传单张图片接口"</span>,notes = <span class="string">"上传单张图片接口"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"header"</span>,dataType = <span class="string">"string"</span>,name = <span class="string">"token"</span>,value = <span class="string">"访问凭证"</span>,required = <span class="keyword">true</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function">String <span class="title">upload</span><span class="params">(HttpServletRequest request, MultipartFile file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//上传目录地址</span></span><br><span class="line">            String uploadDir = request.getSession().getServletContext().getRealPath(<span class="string">"/"</span>) + <span class="string">"upload/"</span>;</span><br><span class="line">            <span class="comment">//如果目录不存在，自动创建文件夹</span></span><br><span class="line">            File dir = <span class="keyword">new</span> File(uploadDir);</span><br><span class="line">            <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">                dir.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            //文件后缀名</span></span><br><span class="line"><span class="comment">            String suttix = file.getOriginalFilename().substring(file.getOriginalFilename().indexOf("."));</span></span><br><span class="line"><span class="comment">            //上传文件名</span></span><br><span class="line"><span class="comment">            String filename = UUID.randomUUID() + suttix;</span></span><br><span class="line"><span class="comment">            //String filename = file.getOriginalFilename();</span></span><br><span class="line"><span class="comment">            //服务器端保存的文件对象</span></span><br><span class="line"><span class="comment">            File serverFile = new File(uploadDir + filename);</span></span><br><span class="line"><span class="comment">            //将上传的文件写入到服务器端文件内</span></span><br><span class="line"><span class="comment">            file.transferTo(serverFile);*/</span></span><br><span class="line">            executeUpload(uploadDir,file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//打印错误堆栈信息</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"上传成功"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提取上传方法为公共方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadDir 上传目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 上传对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeUpload</span><span class="params">(String uploadDir,MultipartFile file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//文件后缀名</span></span><br><span class="line">        String suffix = file.getOriginalFilename().substring(file.getOriginalFilename().indexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="comment">//上传文件名</span></span><br><span class="line">        String filename = UUID.randomUUID()+suffix;</span><br><span class="line">        <span class="comment">//服务器端保存的文件对象</span></span><br><span class="line">        File serverFile = <span class="keyword">new</span> File(uploadDir+filename);</span><br><span class="line">        <span class="comment">//将上传的文件写入到服务器端文件内</span></span><br><span class="line">        file.transferTo(serverFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@PostMapping(value = "/uploads")</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/uploads"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"上传多张图片接口"</span>,notes = <span class="string">"上传多张图片接口"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(paramType = <span class="string">"header"</span>,dataType = <span class="string">"string"</span>,name = <span class="string">"token"</span>,value = <span class="string">"访问凭证"</span>,required = <span class="keyword">true</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">String <span class="title">uploads</span><span class="params">(HttpServletRequest request,MultipartFile[] file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//上传目录地址</span></span><br><span class="line">            String uploadDir = request.getSession().getServletContext().getRealPath(<span class="string">"/"</span>)+<span class="string">"upload/"</span>;</span><br><span class="line">            <span class="comment">//如果目录不存在，自动创建文件夹</span></span><br><span class="line">            File dir = <span class="keyword">new</span> File(uploadDir);</span><br><span class="line">            <span class="keyword">if</span> (!dir.exists())&#123;</span><br><span class="line">                dir.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历数组执行上传</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;file.length ; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(file[i]!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//调用上传方法</span></span><br><span class="line">                    executeUpload(uploadDir,file[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//打印错误堆栈信息</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"上传失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"上传成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成上述代码后，打包Spring Boot程序并启动，打开浏览器访问：<a href="http://localhost:8080/swagger-ui.html，就能看到前文所展示的RESTful" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html，就能看到前文所展示的RESTful</a> API的页面。 </p><p><img src="http://pa5d8eb62.bkt.clouddn.com/1533691593.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;集成Swagger生成RESTful规范API文档&quot;&gt;&lt;a href=&quot;#集成Swagger生成RESTful规范API文档&quot; class=&quot;headerlink&quot; title=&quot;集成Swagger生成RESTful规范API文档&quot;&gt;&lt;/a&gt;集成Swagger生成RESTful规范API文档&lt;/h1&gt;&lt;p&gt;Swagger是为了描述一套标准的而且是和语言无关的REST API的规范。对于外部调用者来说，只需通过Swagger文档即可清楚Server端提供的服务，而不需去阅读源码或接口文档说明。&lt;/p&gt;
&lt;h5 id=&quot;官方网站：http-swagger-io&quot;&gt;&lt;a href=&quot;#官方网站：http-swagger-io&quot; class=&quot;headerlink&quot; title=&quot;官方网站：http://swagger.io&quot;&gt;&lt;/a&gt;官方网站：&lt;a href=&quot;http://swagger.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://swagger.io&lt;/a&gt;&lt;/h5&gt;&lt;h5 id=&quot;中文网站：http-www-sosoapi-com&quot;&gt;&lt;a href=&quot;#中文网站：http-www-sosoapi-com&quot; class=&quot;headerlink&quot; title=&quot;中文网站：http://www.sosoapi.com&quot;&gt;&lt;/a&gt;中文网站：&lt;a href=&quot;http://www.sosoapi.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.sosoapi.com&lt;/a&gt;&lt;/h5&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.syraven.top/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://www.syraven.top/tags/SpringBoot/"/>
    
      <category term="Swagger生成RESTful规范API文档" scheme="http://www.syraven.top/tags/Swagger%E7%94%9F%E6%88%90RESTful%E8%A7%84%E8%8C%83API%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>解决CentOS服务器 命令登录MySQL时，报错ERROR </title>
    <link href="http://www.syraven.top/MySql%20Erro.html"/>
    <id>http://www.syraven.top/MySql Erro.html</id>
    <published>2018-07-12T23:40:00.000Z</published>
    <updated>2018-12-01T12:21:32.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决CentOS-命令登录MySQL时，报错ERROR-1045-28000-Access-denied-for-user-‘root‘-’localhost’-using-password-YES"><a href="#解决CentOS-命令登录MySQL时，报错ERROR-1045-28000-Access-denied-for-user-‘root‘-’localhost’-using-password-YES" class="headerlink" title="解决CentOS 命令登录MySQL时，报错ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)"></a>解决CentOS 命令登录MySQL时，报错ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)</h1><p><img src="https://i.imgur.com/UHjRNik.png" alt=""></p><a id="more"></a><hr><h1 id="错误解决方法"><a href="#错误解决方法" class="headerlink" title="错误解决方法"></a>错误解决方法</h1><h2 id="1-停用mysql"><a href="#1-停用mysql" class="headerlink" title="1.停用mysql"></a>1.停用mysql</h2><h4 id="etc-rc-d-init-d-mysqld-stop"><a href="#etc-rc-d-init-d-mysqld-stop" class="headerlink" title="# /etc/rc.d/init.d/mysqld stop"></a># /etc/rc.d/init.d/mysqld stop</h4><h2 id="2-输入命令"><a href="#2-输入命令" class="headerlink" title="2.输入命令"></a>2.输入命令</h2><h4 id="mysqld-safe-–user-mysql-–skip-grant-tables-–skip-networking-amp"><a href="#mysqld-safe-–user-mysql-–skip-grant-tables-–skip-networking-amp" class="headerlink" title="#mysqld_safe –user=mysql –skip-grant-tables –skip-networking &amp;"></a>#mysqld_safe –user=mysql –skip-grant-tables –skip-networking &amp;</h4><p>或者修改配置文件</p><p>####在mysql安装根目录下找到my.cnf, 打开刚才我们找到的配置文件，然后在里面找到 [mysqld] 这一项，然后在该配置项下添加 skip-grant-tables 这个配置，然后保存文件。 </p><h2 id="3-登入数据库"><a href="#3-登入数据库" class="headerlink" title="3.登入数据库"></a>3.登入数据库</h2><h4 id="mysql-u-root-mysql"><a href="#mysql-u-root-mysql" class="headerlink" title="#mysql -u root mysql;"></a>#mysql -u root mysql;</h4><h4 id="mysql-u-root-p-密码为空，直接回车就好"><a href="#mysql-u-root-p-密码为空，直接回车就好" class="headerlink" title="#mysql -u root -p;密码为空，直接回车就好"></a>#mysql -u root -p;密码为空，直接回车就好</h4><p><img src="https://i.imgur.com/Uk6ES4e.png" alt=""></p><h2 id="4-mysql-gt-use-mysql"><a href="#4-mysql-gt-use-mysql" class="headerlink" title="4.mysql&gt;use mysql;"></a>4.mysql&gt;use mysql;</h2><h4 id="结果如下：Database-changed"><a href="#结果如下：Database-changed" class="headerlink" title="结果如下：Database changed"></a>结果如下：Database changed</h4><h2 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h2><h4 id="mysql-gt-UPDATE-user-SET-Password-PASSWORD-‘newpassword’-where-USER-’newuser’"><a href="#mysql-gt-UPDATE-user-SET-Password-PASSWORD-‘newpassword’-where-USER-’newuser’" class="headerlink" title="mysql&gt; UPDATE user SET Password=PASSWORD(‘newpassword’)where USER=’newuser’;"></a>mysql&gt; UPDATE user SET Password=PASSWORD(‘newpassword’)where USER=’newuser’;</h4><h4 id="例如给root设置新密码："><a href="#例如给root设置新密码：" class="headerlink" title="例如给root设置新密码："></a>例如给root设置新密码：</h4><h5 id="UPDATE-user-SET-Password-PASSWORD-‘123456’-where-USER-’root’"><a href="#UPDATE-user-SET-Password-PASSWORD-‘123456’-where-USER-’root’" class="headerlink" title="UPDATE user SET Password=PASSWORD(‘123456’)where USER=’root’;"></a>UPDATE user SET Password=PASSWORD(‘123456’)where USER=’root’;</h5><p><img src="https://i.imgur.com/UklzUFj.png" alt=""></p><h5 id="mysql-gt-FLUSH-PRIVILEGES"><a href="#mysql-gt-FLUSH-PRIVILEGES" class="headerlink" title="mysql&gt;FLUSH PRIVILEGES;"></a>mysql&gt;FLUSH PRIVILEGES;</h5><h5 id="mysql-gt-quit"><a href="#mysql-gt-quit" class="headerlink" title="mysql&gt; quit"></a>mysql&gt; quit</h5><p><img src="https://i.imgur.com/srWFzWH.png" alt=""></p><h2 id="6-最后重启mysql"><a href="#6-最后重启mysql" class="headerlink" title="6.最后重启mysql"></a>6.最后重启mysql</h2><h4 id="etc-init-d-mysqld-restart"><a href="#etc-init-d-mysqld-restart" class="headerlink" title="#/etc/init.d/mysqld restart"></a>#/etc/init.d/mysqld restart</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;解决CentOS-命令登录MySQL时，报错ERROR-1045-28000-Access-denied-for-user-‘root‘-’localhost’-using-password-YES&quot;&gt;&lt;a href=&quot;#解决CentOS-命令登录MySQL时，报错ERROR-1045-28000-Access-denied-for-user-‘root‘-’localhost’-using-password-YES&quot; class=&quot;headerlink&quot; title=&quot;解决CentOS 命令登录MySQL时，报错ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)&quot;&gt;&lt;/a&gt;解决CentOS 命令登录MySQL时，报错ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/UHjRNik.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.syraven.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://www.syraven.top/tags/MySQL/"/>
    
      <category term="Centos" scheme="http://www.syraven.top/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>记录一次使用druid数据库连接池遇到的Bug</title>
    <link href="http://www.syraven.top/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8druid%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E9%81%87%E5%88%B0Bug.html"/>
    <id>http://www.syraven.top/记录一次使用druid数据库连接池遇到Bug.html</id>
    <published>2018-06-25T08:52:00.000Z</published>
    <updated>2018-12-01T12:21:31.523Z</updated>
    
    <content type="html"><![CDATA[<p>具体的错误代码为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line">### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Access denied for user 'YuSong'@'localhost' (using password: YES)</span><br><span class="line">### The error may exist in file [D:\代码仓库\SsmRaven\target\classes\mapper\UserDao.xml]</span><br><span class="line">### The error may involve com.syRaven.dao.IUserDao.selectUser</span><br><span class="line">### The error occurred while executing a query</span><br><span class="line">### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Access denied for user 'YuSong'@'localhost' (using password: YES)</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="java-sql-SQLException-Access-denied-for-user-‘YuSong‘-’localhost’-using-password-YES"><a href="#java-sql-SQLException-Access-denied-for-user-‘YuSong‘-’localhost’-using-password-YES" class="headerlink" title="java.sql.SQLException: Access denied for user ‘YuSong‘@’localhost’ (using password: YES)"></a>java.sql.SQLException: Access denied for user ‘YuSong‘@’localhost’ (using password: YES)</h4><h5 id="使用的是MySQL数据库，使用druid连接池访问数据库失败。"><a href="#使用的是MySQL数据库，使用druid连接池访问数据库失败。" class="headerlink" title="使用的是MySQL数据库，使用druid连接池访问数据库失败。"></a>使用的是MySQL数据库，使用druid连接池访问数据库失败。</h5><p><em>看报错的代码的意思是：ava.sql.SQLException：拒绝用户‘YuSong‘@’localhost’的访问（使用password：YES）</em></p><p>观察这个错误代码发现数据库的用户名是我的电脑主机名，并不是jdbc.properties中设置的root.</p><p>数据库拒绝访问，我表示很蛋疼，因为数据库的用户名为root，而且也经过测试，通过root是可以连接到数据库的，为什么出来的是本机名YuSong？</p><p>后来经过查询，在Spring完成注入时是用 “${..}”  方式获取值完成注入的。而通过这种表达式也能直接获取到JVM系统属性。</p><p>因为在系统中也有个username属性，这时系统变量覆盖了Properties中的值，这时取得username的值为系统的用户名Administrator（YuSong），密码为properties中的password去查询数据库，此时用户名名和密码并不匹配就会报错。</p><p>1、将jdbc.properties文件中的username名称换为其他不冲突的字符，比如user。<br>2、在Spring配置文件中修改成：&lt;context:property-placeholder location=”classpath:/jdbc.properties” system-properties-mode=”FALLBACK / NEVER”/&gt;   </p><p>　　　　　　添加一个system-properties-mode属性</p><p>　　　　　　该属性有三个值：FALLBACK　　— 默认值，不存在时覆盖</p><p>　　　　　　　　　　　　　　NEVER　　　   — 不覆盖</p><p>　　　　　　　　　　　　　　OVERRIDE　　— 覆盖</p><h3 id="This-link"><a href="#This-link" class="headerlink" title="This link:"></a>This link:</h3><p>[<a href="https://blog.csdn.net/qq_35181209/article/details/79497786]" target="_blank" rel="noopener">https://blog.csdn.net/qq_35181209/article/details/79497786]</a><br>[<a href="https://www.cnblogs.com/tongxuping/p/7081656.html]" target="_blank" rel="noopener">https://www.cnblogs.com/tongxuping/p/7081656.html]</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;具体的错误代码为：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Access denied for user &#39;YuSong&#39;@&#39;localhost&#39; (using password: YES)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### The error may exist in file [D:\代码仓库\SsmRaven\target\classes\mapper\UserDao.xml]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### The error may involve com.syRaven.dao.IUserDao.selectUser&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### The error occurred while executing a query&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Access denied for user &#39;YuSong&#39;@&#39;localhost&#39; (using password: YES)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java技术" scheme="http://www.syraven.top/categories/java%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MySQL" scheme="http://www.syraven.top/tags/MySQL/"/>
    
      <category term="ddruid数据库连接池" scheme="http://www.syraven.top/tags/ddruid%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
      <category term="Bug积累" scheme="http://www.syraven.top/tags/Bug%E7%A7%AF%E7%B4%AF/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode系列之数据库</title>
    <link href="http://www.syraven.top/LeetCode%E7%B3%BB%E5%88%97%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93.html"/>
    <id>http://www.syraven.top/LeetCode系列之数据库.html</id>
    <published>2018-06-22T02:39:00.000Z</published>
    <updated>2018-12-01T12:21:32.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二高的薪水–sql查询"><a href="#第二高的薪水–sql查询" class="headerlink" title="第二高的薪水–sql查询"></a>第二高的薪水–sql查询</h1><h5 id="LEETCODE题目：-2-编写一个-SQL-查询，获取-Employee-表中第二高的薪水（Salary）-。"><a href="#LEETCODE题目：-2-编写一个-SQL-查询，获取-Employee-表中第二高的薪水（Salary）-。" class="headerlink" title="LEETCODE题目：(2)编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。"></a>LEETCODE题目：(2)编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">| Id | Salary |</span><br><span class="line">+<span class="comment">----+--------+</span></span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+<span class="comment">----+--------+</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="例如上述-Employee表，SQL查询应该返回200作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回-null。"><a href="#例如上述-Employee表，SQL查询应该返回200作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回-null。" class="headerlink" title="例如上述 Employee表，SQL查询应该返回200作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。"></a>例如上述 Employee表，SQL查询应该返回200作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| SecondHighestSalary |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">| 200                 |</span><br><span class="line">+<span class="comment">---------------------+</span></span><br></pre></td></tr></table></figure><p>MySQL :</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max(Salary) as SecondHighestSalary from Employee where Salary&lt;(select max(Salary) from Employee);</span><br></pre></td></tr></table></figure><p>第一种方法<br><code>select max(Salary) from Employee</code> 先找出最高的工资。<br>将最高工资作为条件，从小于最高工资中找最高的工资，找出来就是第二高的工资。<br>具体执行结果，如下图：</p><p><img src="http://pa5d8eb62.bkt.clouddn.com/%E6%9F%A5%E8%AF%A2%E7%AC%AC%E4%BA%8C%E9%AB%98%E6%96%B9%E6%B3%951.jpg" alt="第一种方法"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二高的薪水–sql查询&quot;&gt;&lt;a href=&quot;#第二高的薪水–sql查询&quot; class=&quot;headerlink&quot; title=&quot;第二高的薪水–sql查询&quot;&gt;&lt;/a&gt;第二高的薪水–sql查询&lt;/h1&gt;&lt;h5 id=&quot;LEETCODE题目：-2-编写一个-SQL-查询，获取-Employee-表中第二高的薪水（Salary）-。&quot;&gt;&lt;a href=&quot;#LEETCODE题目：-2-编写一个-SQL-查询，获取-Employee-表中第二高的薪水（Salary）-。&quot; class=&quot;headerlink&quot; title=&quot;LEETCODE题目：(2)编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。&quot;&gt;&lt;/a&gt;LEETCODE题目：(2)编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary） 。&lt;/h5&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Id | Salary |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 1  | 100    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 2  | 200    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| 3  | 300    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;comment&quot;&gt;----+--------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.syraven.top/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://www.syraven.top/tags/MySQL/"/>
    
      <category term="LeetCode" scheme="http://www.syraven.top/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>java面试题总结</title>
    <link href="http://www.syraven.top/java%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.html"/>
    <id>http://www.syraven.top/java面试题总结.html</id>
    <published>2018-06-10T21:16:00.000Z</published>
    <updated>2018-12-01T12:21:32.051Z</updated>
    
    <content type="html"><![CDATA[<p>一些常见面试题</p><h6 id="1、说说-amp-和-amp-amp-的区别"><a href="#1、说说-amp-和-amp-amp-的区别" class="headerlink" title="1、说说&amp;和&amp;&amp;的区别"></a>1、说说&amp;和&amp;&amp;的区别</h6><p>&emsp;&emsp; &amp;&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and），当运算符俩变得表达式的结果都为true时，结果才为true，否则，只要一方为false，则结果为false。区别是&amp;&amp;只要满足第一个条件，后面条件就不再判断。而&amp;要对所有的条件都进行判断。</p><p> &emsp;&emsp;&amp;&amp;为短路与，即如果第一个表达式为false，则不再判断第二个表达式了。例如if(str!=null &amp;&amp; !str.equals(s))表达式，当str为null时，后面的的表达式为false，不会再执行了，所以不会出现NullPointerException异常。如果将&amp;&amp;改为&amp;，则会抛出NullPointerException异常。</p><h6 id="2、Integer与int的区别"><a href="#2、Integer与int的区别" class="headerlink" title="2、Integer与int的区别"></a>2、Integer与int的区别</h6><p> &emsp;&emsp; int是java提供的8种原始数据类型之一。java为每个原始类提供了封装类，Integer是java为int提供的封装类。<strong>int的默认值为0</strong>，而<strong>Integer的默认值为null</strong>，即Integer可以区分出未赋值和值为0的区别，int则无法表达出未赋值的情况。</p><p>  &emsp;&emsp;例如：要想表达出没有参加考试和考试成绩为0的区别，则只能使用Integer。</p><p> &emsp;&emsp;在Hibernate框架中，如果将OID定义为Integer类型，那么Hibernate就可以根据其值是否为null而判断一个对象是否是临时的，如果将OID定义为了int类型，还需要在hbm映射文件中设置其unsaved-value属性为0。</p><p> &emsp;&emsp;另外，Integer提供了多个与整数相关的操作方法，例如，将一个字符串转换成整数，Integer中还定义了表示整数的最大值和最小值的常量。</p><h6 id="3、抽象类（abstractclass）和接口（interface）有什么区别？"><a href="#3、抽象类（abstractclass）和接口（interface）有什么区别？" class="headerlink" title="3、抽象类（abstractclass）和接口（interface）有什么区别？"></a>3、抽象类（abstractclass）和接口（interface）有什么区别？</h6><ol><li>抽象类可以有<strong>构造方法</strong>，接口不能有构造方法。</li><li>抽象类中可以有<strong>普通成员变量</strong>，接口中没有普通成员变量。</li><li>抽象类中可以包含非抽象的普通方法，接口中的方法必须是抽象的，不能有非抽象的普通方法。</li><li>抽象类中的抽象方法的访问类可以是public，protected和（默认类型，虽然eclipese下不报错，但应该也不行），但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型。</li><li>抽象类中可以包含静态方法，接口中不能包含静态方法。</li><li>抽象类和接口中可以包含静态成员变量，抽象类中的静态成员变量的访问类可以任意，接口中定义的变量只能是public static final类型，并且默认即为public static final类型。</li><li>一个类可以实现多个接口，但只能继承一个抽象类。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一些常见面试题&lt;/p&gt;
&lt;h6 id=&quot;1、说说-amp-和-amp-amp-的区别&quot;&gt;&lt;a href=&quot;#1、说说-amp-和-amp-amp-的区别&quot; class=&quot;headerlink&quot; title=&quot;1、说说&amp;amp;和&amp;amp;&amp;amp;的区别&quot;&gt;&lt;/a&gt;1、说说
      
    
    </summary>
    
      <category term="java面试题" scheme="http://www.syraven.top/categories/java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://www.syraven.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>LinkedHashMap和HashMap的比较使用</title>
    <link href="http://www.syraven.top/LinkedHashMap%E5%92%8CHashMap%E7%9A%84%E6%AF%94%E8%BE%83%E4%BD%BF%E7%94%A8.html"/>
    <id>http://www.syraven.top/LinkedHashMap和HashMap的比较使用.html</id>
    <published>2018-06-10T09:03:00.000Z</published>
    <updated>2019-05-03T13:47:33.327Z</updated>
    
    <content type="html"><![CDATA[<h6 id="前几天在Java知音看到这篇文章，刚好出去面试的时候被问到很多次HashMap和LinkedHashMap，就做个记录。"><a href="#前几天在Java知音看到这篇文章，刚好出去面试的时候被问到很多次HashMap和LinkedHashMap，就做个记录。" class="headerlink" title="前几天在Java知音看到这篇文章，刚好出去面试的时候被问到很多次HashMap和LinkedHashMap，就做个记录。"></a>前几天在Java知音看到这篇文章，刚好出去面试的时候被问到很多次HashMap和LinkedHashMap，就做个记录。</h6><a id="more"></a><h6 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉&lt;br&gt; </span></span><br><span class="line"><span class="comment"> * 〈〉</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018/6/4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLinkedHashMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"******LinkedHashMap******"</span>);</span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;Integer, String&gt;();</span><br><span class="line">        map.put(<span class="number">6</span>,<span class="string">"apple"</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="string">"banana"</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="string">"pear"</span>);</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="string">"orange"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Iterator it = map.keySet().iterator();it.hasNext();)</span><br><span class="line">        &#123;</span><br><span class="line">            Object key = it.next();</span><br><span class="line">            System.out.println(key+<span class="string">"="</span>+map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"******HashMap******"</span>);</span><br><span class="line">        Map&lt;Integer,String&gt; map1 = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">        map1.put(<span class="number">6</span>,<span class="string">"apple"</span>);</span><br><span class="line">        map1.put(<span class="number">3</span>,<span class="string">"banana"</span>);</span><br><span class="line">        map1.put(<span class="number">2</span>,<span class="string">"pear"</span>);</span><br><span class="line">        map1.put(<span class="keyword">null</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Iterator it = map1.keySet().iterator();it.hasNext();)</span><br><span class="line">        &#123;</span><br><span class="line">            Object key = it.next();</span><br><span class="line">            System.out.println(key+<span class="string">"="</span>+map1.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="运行结果如下："><a href="#运行结果如下：" class="headerlink" title="运行结果如下："></a>运行结果如下：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">******LinkedHashMap******</span><br><span class="line"><span class="number">6</span>=apple</span><br><span class="line"><span class="number">3</span>=banana</span><br><span class="line"><span class="number">2</span>=pear</span><br><span class="line"><span class="keyword">null</span>=orange</span><br><span class="line">******HashMap******</span><br><span class="line"><span class="keyword">null</span>=</span><br><span class="line"><span class="number">2</span>=pear</span><br><span class="line"><span class="number">3</span>=banana</span><br><span class="line"><span class="number">6</span>=apple</span><br></pre></td></tr></table></figure><h5 id="分析：LinkedHashMap-的特点是put进去的对象位置未发生变化-而HashMap会发生变化。"><a href="#分析：LinkedHashMap-的特点是put进去的对象位置未发生变化-而HashMap会发生变化。" class="headerlink" title="分析：LinkedHashMap 的特点是put进去的对象位置未发生变化,而HashMap会发生变化。"></a>分析：LinkedHashMap 的特点是put进去的对象位置未发生变化,而HashMap会发生变化。</h5><h6 id="java为数据结构中的映射定义了一个Map接口，Java-中的-Map-接口是和-Collection接口同一等级的集合根接口，它表示一个键值对-key-value-的映射。"><a href="#java为数据结构中的映射定义了一个Map接口，Java-中的-Map-接口是和-Collection接口同一等级的集合根接口，它表示一个键值对-key-value-的映射。" class="headerlink" title="java为数据结构中的映射定义了一个Map接口，Java 中的 Map 接口是和 Collection接口同一等级的集合根接口，它表示一个键值对 (key-value) 的映射。"></a>java为数据结构中的映射定义了一个Map接口，Java 中的 Map 接口是和 Collection接口同一等级的集合根接口，它表示一个键值对 (key-value) 的映射。</h6><h5 id="Map的实现类主要有4种"><a href="#Map的实现类主要有4种" class="headerlink" title="Map的实现类主要有4种:"></a>Map的实现类主要有4种:</h5><ul><li><p>Hashtable</p><ul><li>古老，线程安全</li></ul></li><li><p>HashMap</p><ul><li>速度很快，但没有顺序，非线程安全</li></ul></li><li><p>TreeMap</p><ul><li>有序的，效率比HashMap低</li></ul></li><li><p>LinkedHashMap</p><ul><li>结合HashMap和TreeMap的优点，有序的同时效率也不错仅比HashMap慢一点</li></ul><blockquote><blockquote><blockquote><p>按照效率排序的话：<br>HashMap &gt; LinkedHashMap &gt; TreeMap &gt; Hashtable</p></blockquote></blockquote></blockquote></li></ul><h5 id="Map主要用于存储健值对，根据键得到值，因此不允许键重复-重复了覆盖了-，但允许值重复。"><a href="#Map主要用于存储健值对，根据键得到值，因此不允许键重复-重复了覆盖了-，但允许值重复。" class="headerlink" title="Map主要用于存储健值对，根据键得到值，因此不允许键重复(重复了覆盖了)，但允许值重复。"></a>Map主要用于存储健值对，根据键得到值，因此不允许键重复(重复了覆盖了)，但允许值重复。</h5><p>Hashmap 是一个最常用的Map，它根据键的HashCode值存储数据,根据键可以直接获取它的值，具有很快的访问速度，遍历时，取得数据的顺序是完全随机的。 HashMap最多只允许一条记录的键为Null;允许多条记录的值为Null。</p><p>HashMap不支持线程的同步，即任一时刻可以有多个线程同时写HashMap;可能会导致数据的不一致。如果需要同步，可以用 Collections的synchronizedMap方法使HashMap具有同步的能力，或者使用ConcurrentHashMap。</p><p>Hashtable与 HashMap类似，它继承自Dictionary类，不同的是：它不允许记录的键或者值为空；它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了 Hashtable在写入时会比较慢。</p><p>LinkedHashMap 是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会比 LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。</p><p>TreeMap实现SortMap接口，能够把它保存的记录根据键排序,默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。</p><p>一般情况下，我们用的最多的是HashMap，在Map 中插入、删除和定位元素，HashMap 是最好的选择。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。如果需要输出的顺序和输入的相同，那么用LinkedHashMap 可以实现,它还可以按读取顺序来排列。</p><p>HashMap是一个最常用的Map，它根据键的hashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度。HashMap最多只允许一条记录的键为NULL，允许多条记录的值为NULL。</p><p>HashMap不支持线程同步，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致性。如果需要同步，可以用Collections的synchronizedMap方法使HashMap具有同步的能力。</p><p>Hashtable与HashMap类似，不同的是：它不允许记录的键或者值为空；它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了Hashtable在写入时会比较慢。</p><p>LinkedHashMap保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的。</p><p>在遍历的时候会比HashMap慢TreeMap能够把它保存的记录根据键排序，默认是按升序排序，也可以指定排序的比较器。当用Iterator遍历TreeMap时，得到的记录是排过序的。</p><h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><p><a href="http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ==&amp;mid=2247485506&amp;idx=1&amp;sn=117c87867951bc11a2883274b3569528&amp;chksm=ebd6376edca1be7843961b117ee1a85aa2c8fb963c16486370d770a5c9240cc8590fa6ab3b72&amp;mpshare=1&amp;scene=1&amp;srcid=0611QrlEc3EBXssT4oQMFLR9#rd" target="_blank" rel="noopener">LinkedHashMap和HashMap的比较使用</a></p><p><a href="https://blog.csdn.net/u011240877/article/details/52929523" target="_blank" rel="noopener">Java 集合深入理解（14）：Map 概述</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;前几天在Java知音看到这篇文章，刚好出去面试的时候被问到很多次HashMap和LinkedHashMap，就做个记录。&quot;&gt;&lt;a href=&quot;#前几天在Java知音看到这篇文章，刚好出去面试的时候被问到很多次HashMap和LinkedHashMap，就做个记录。&quot; class=&quot;headerlink&quot; title=&quot;前几天在Java知音看到这篇文章，刚好出去面试的时候被问到很多次HashMap和LinkedHashMap，就做个记录。&quot;&gt;&lt;/a&gt;前几天在Java知音看到这篇文章，刚好出去面试的时候被问到很多次HashMap和LinkedHashMap，就做个记录。&lt;/h6&gt;
    
    </summary>
    
      <category term="Java基础学习" scheme="http://www.syraven.top/categories/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="HashMap" scheme="http://www.syraven.top/tags/HashMap/"/>
    
      <category term="LinkedHashMap" scheme="http://www.syraven.top/tags/LinkedHashMap/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.syraven.top/hello-world.html"/>
    <id>http://www.syraven.top/hello-world.html</id>
    <published>2018-06-05T08:41:06.000Z</published>
    <updated>2018-12-01T12:21:33.245Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Markdown的用法</title>
    <link href="http://www.syraven.top/excho.html"/>
    <id>http://www.syraven.top/excho.html</id>
    <published>2018-06-03T08:51:00.000Z</published>
    <updated>2018-12-01T12:21:33.248Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Markdown的使用语法"><a href="#Markdown的使用语法" class="headerlink" title="Markdown的使用语法"></a>Markdown的使用语法</h3><ul><li><strong>Markdown和扩展Markdown简洁的语法</strong></li><li><strong>代码块高亮</strong></li><li><strong>图片链接和图片上传</strong></li><li><strong><em>LaTex</em>数学公式</strong></li><li><strong>UML序列图和流程图</strong></li><li><strong>离线写博客</strong></li><li><strong>导入导出Markdown文件</strong></li><li><strong>丰富的快捷键</strong></li></ul><hr><a id="more"></a><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>加粗    <code>Ctrl + B</code> </li><li>斜体    <code>Ctrl + I</code> </li><li>引用    <code>Ctrl + Q</code></li><li>插入链接    <code>Ctrl + L</code></li><li>插入代码    <code>Ctrl + K</code></li><li>插入图片    <code>Ctrl + G</code></li><li>提升标题    <code>Ctrl + H</code></li><li>有序列表    <code>Ctrl + O</code></li><li>无序列表    <code>Ctrl + U</code></li><li>横线    <code>Ctrl + R</code></li><li>撤销    <code>Ctrl + Z</code></li><li>重做    <code>Ctrl + Y</code></li></ul><h2 id="Markdown及扩展"><a href="#Markdown及扩展" class="headerlink" title="Markdown及扩展"></a>Markdown及扩展</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank"> [ 维基百科 ]</a></p></blockquote><p>使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.csdn.net" target="_blank" rel="noopener">链接</a>等，详细语法参考帮助？。</p><p>本编辑器支持 <strong>Markdown Extra</strong> , 　扩展了很多好用的功能。具体请参考<a href="https://github.com/jmcmanus/pagedown-extra" title="Pagedown Extra" target="_blank" rel="noopener">Github</a>.  </p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：</p><table><thead><tr><th>项目</th><th>价格</th></tr></thead><tbody><tr><td>Computer</td><td>$1600</td></tr><tr><td>Phone</td><td>$12</td></tr><tr><td>Pipe</td><td>$1</td></tr></tbody></table><p>可以使用冒号来定义对齐方式：</p><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 元</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 元</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 元</td><td style="text-align:center">234</td></tr></tbody></table><p>###定义列表</p><p><strong>Markdown　Extra</strong>　定义列表语法：<br>项目１<br>项目２<br>:   定义 A<br>:   定义 B</p><p>项目３<br>:   定义 C</p><p>:   定义 D</p><pre><code>&gt; 定义D内容</code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块语法遵循标准markdown代码，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure></p><p>###脚注<br>生成一个脚注[^footnote].<br>  [^footnote]: 这里是 <strong>脚注</strong> 的 <em>内容</em>.</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>用 <code>[TOC]</code>来生成目录：</p><p>[TOC]</p><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>使用MathJax渲染<em>LaTex</em> 数学公式，详见<a href="http://math.stackexchange.com/" target="_blank" rel="noopener">math.stackexchange.com</a>.</p><ul><li>行内公式，数学公式为：$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。</li><li>块级公式：</li></ul><p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p>更多LaTex语法请参考 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">这儿</a>.</p><h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图:"></a>UML 图:</h3><p>可以渲染序列图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><p>或者流程图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><ul><li>关于 <strong>序列图</strong> 语法，参考 <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">这儿</a>,</li><li>关于 <strong>流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">这儿</a>.</li></ul><h2 id="离线写博客"><a href="#离线写博客" class="headerlink" title="离线写博客"></a>离线写博客</h2><p>即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入<a href="http://write.blog.csdn.net/mdeditor" target="_blank" rel="noopener">write.blog.csdn.net/mdeditor</a>即可。<strong>Markdown编辑器</strong>使用浏览器离线存储将内容保存在本地。</p><p>用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。</p><p>博客发表后，本地缓存将被删除。　</p><p>用户可以选择 <i class="icon-disk"></i> 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。</p><blockquote><p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，<strong>请务必及时发表或者保存到服务器草稿箱</strong>。</p></blockquote><p>##浏览器兼容</p><ol><li>目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。</li><li>IE９以下不支持</li><li>IE９，１０，１１存在以下问题<ol><li>不支持离线功能</li><li>IE9不支持文件导入导出</li><li>IE10不支持拖拽文件导入</li></ol></li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Markdown的使用语法&quot;&gt;&lt;a href=&quot;#Markdown的使用语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown的使用语法&quot;&gt;&lt;/a&gt;Markdown的使用语法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Markdown和扩展Markdown简洁的语法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码块高亮&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图片链接和图片上传&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;LaTex&lt;/em&gt;数学公式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UML序列图和流程图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;离线写博客&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;导入导出Markdown文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;丰富的快捷键&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="技术教程" scheme="http://www.syraven.top/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Markdown" scheme="http://www.syraven.top/tags/Markdown/"/>
    
  </entry>
  
</feed>
